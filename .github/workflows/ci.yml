name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linter
        run: npm run lint
        
      - name: Run type check
        run: npx tsc --noEmit
        
      - name: Run tests
        run: npm test
        
      - name: Upload test coverage
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage/

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: .next/

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --production
        continue-on-error: true
        
      - name: Check for critical vulnerabilities
        run: |
          AUDIT_OUTPUT=$(npm audit --json --production)
          CRITICAL_COUNT=$(echo $AUDIT_OUTPUT | jq '.metadata.vulnerabilities.critical // 0')
          HIGH_COUNT=$(echo $AUDIT_OUTPUT | jq '.metadata.vulnerabilities.high // 0')
          
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "‚ùå Found $CRITICAL_COUNT critical vulnerabilities"
            exit 1
          fi
          
          if [ "$HIGH_COUNT" -gt 5 ]; then
            echo "‚ö†Ô∏è Found $HIGH_COUNT high vulnerabilities (threshold: 5)"
            exit 1
          fi
          
          echo "‚úÖ Security audit passed"

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prebuilt'
          github-comment: true
        id: vercel
        
      - name: Comment PR with preview URL
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ Preview deployed to: ${{ steps.vercel.outputs.preview-url }}'
            })

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --prebuilt'
        id: vercel
        
      - name: Verify deployment health
        run: |
          sleep 30  # Wait for deployment to stabilize
          HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.vercel.outputs.preview-url }}/api/health")
          
          if [ "$HEALTH_CHECK" -eq 200 ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed with status: $HEALTH_CHECK"
            exit 1
          fi
          
      - name: Notify deployment success
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${new Date().toISOString().split('T')[0]}`,
              name: `Production Release ${new Date().toISOString().split('T')[0]}`,
              body: 'Automated production deployment',
              draft: false,
              prerelease: false
            });
            console.log(`Created release ${release.tag_name}`);

  lighthouse:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-preview
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            ${{ needs.deploy-preview.outputs.preview-url }}
            ${{ needs.deploy-preview.outputs.preview-url }}/brics
            ${{ needs.deploy-preview.outputs.preview-url }}/indonesia
            ${{ needs.deploy-preview.outputs.preview-url }}/bali
          uploadArtifacts: true
          temporaryPublicStorage: true