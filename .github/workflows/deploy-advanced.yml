name: Advanced Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  DEPLOY_USER: 'deploy'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
      continue-on-error: true  # Don't fail on lint warnings
    
    - name: Run tests
      run: npm test -- --passWithNoTests --coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/coverage-final.json
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_SITE_URL: ${{ github.ref == 'refs/heads/main' && 'https://bali.report' || 'https://staging.bali.report' }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          .next/
          public/
          package.json
          package-lock.json
        retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.bali.report
    
    steps:
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_DROPLET_IP }}
        username: ${{ secrets.DROPLET_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          cd /home/${{ env.DEPLOY_USER }}/bali-report
          git pull origin develop
          npm ci --production
          npm run build
          pm2 restart bali-report-staging --update-env
          pm2 save
          echo "[$(date)] Staging deployment completed" >> ~/deployments.log

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://bali.report
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create deployment backup
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DROPLET_IP }}
        username: ${{ secrets.DROPLET_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          # Create backup before deployment
          cd /home/${{ env.DEPLOY_USER }}/bali-report
          BACKUP_NAME="pre-deploy-$(date +%Y%m%d-%H%M%S)"
          tar -czf ~/backups/$BACKUP_NAME.tar.gz . --exclude=node_modules --exclude=.next
          echo "Backup created: $BACKUP_NAME"
    
    - name: Deploy to production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DROPLET_IP }}
        username: ${{ secrets.DROPLET_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          set -e  # Exit on error
          
          cd /home/${{ env.DEPLOY_USER }}/bali-report
          
          # Store current version for rollback
          CURRENT_VERSION=$(git rev-parse HEAD)
          echo $CURRENT_VERSION > ~/last-deploy-version.txt
          
          # Pull latest changes
          git pull origin main
          
          # Install dependencies
          npm ci --production
          
          # Build application
          npm run build
          
          # Gracefully restart with zero downtime
          pm2 reload bali-report --update-env
          
          # Health check
          sleep 5
          curl -f https://bali.report || exit 1
          
          # Save PM2 state
          pm2 save
          
          # Log deployment
          echo "[$(date)] Production deployment completed: $(git rev-parse --short HEAD)" >> ~/deployments.log
    
    - name: Verify deployment
      run: |
        sleep 10
        response=$(curl -s -o /dev/null -w "%{http_code}" https://bali.report)
        if [ $response -eq 200 ]; then
          echo "✅ Deployment verified successfully"
        else
          echo "❌ Deployment verification failed with status code: $response"
          exit 1
        fi

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event.inputs.rollback == true
    environment:
      name: production
    
    steps:
    - name: Rollback to previous version
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DROPLET_IP }}
        username: ${{ secrets.DROPLET_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          cd /home/${{ env.DEPLOY_USER }}/bali-report
          
          # Get last known good version
          if [ -f ~/last-deploy-version.txt ]; then
            LAST_VERSION=$(cat ~/last-deploy-version.txt)
            echo "Rolling back to version: $LAST_VERSION"
            
            # Checkout previous version
            git checkout $LAST_VERSION
            
            # Rebuild and restart
            npm ci --production
            npm run build
            pm2 restart bali-report --update-env
            
            echo "[$(date)] Rollback completed to: $LAST_VERSION" >> ~/deployments.log
          else
            echo "No previous version found for rollback"
            exit 1
          fi

  cleanup:
    name: Cleanup Old Deployments
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    
    steps:
    - name: Clean up old backups
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DROPLET_IP }}
        username: ${{ secrets.DROPLET_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          # Remove backups older than 30 days
          find ~/backups -name "pre-deploy-*.tar.gz" -mtime +30 -delete
          
          # Clean PM2 logs
          pm2 flush
          
          # Clean npm cache
          npm cache clean --force
          
          echo "[$(date)] Cleanup completed" >> ~/deployments.log