'use client';

/**
 * Personalized Feed Component
 * AI-powered content recommendations using Grok with BPD values alignment
 * Ensures inclusiveness, multipolarity, and sustainable development focus
 */

import React, { useState, useEffect } from 'react';
import { PersonalizedRecommendation } from '@/lib/grok-enhanced-service';
import { Article } from '@/lib/rss-parser';
import ArticleCard from './ArticleCard';

interface PersonalizedFeedProps {
  userPreferences: any;
  userLocation?: string;
  className?: string;
}

interface FeedData {
  recommendation: PersonalizedRecommendation | null;
  fallback: boolean;
  bpdAlignment?: any;
  totalArticles?: number;
  disclaimer?: string;
  error?: string;
}

export default function PersonalizedFeed({ 
  userPreferences, 
  userLocation,
  className = '' 
}: PersonalizedFeedProps) {
  const [feedData, setFeedData] = useState<FeedData>({
    recommendation: null,
    fallback: true
  });
  const [loading, setLoading] = useState(true);
  const [refreshKey, setRefreshKey] = useState(0);

  useEffect(() => {
    if (userPreferences) {
      fetchPersonalizedFeed();
    }
  }, [userPreferences, userLocation, refreshKey]);

  const fetchPersonalizedFeed = async () => {
    setLoading(true);
    
    try {
      const preferencesParam = encodeURIComponent(JSON.stringify(userPreferences));
      const url = `/api/grok-enhanced?action=personalized-feed&preferences=${preferencesParam}${userLocation ? `&location=${encodeURIComponent(userLocation)}` : ''}`;
      
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data: FeedData = await response.json();\n      setFeedData(data);\n      \n      // Track analytics event\n      if (typeof window !== 'undefined' && (window as any)._paq) {\n        (window as any)._paq.push([\n          'trackEvent', \n          'Personalized Feed', \n          'AI Recommendation', \n          data.fallback ? 'Fallback' : 'Grok AI',\n          data.recommendation?.articles.length || 0\n        ]);\n      }\n    } catch (err) {\n      console.error('Failed to fetch personalized feed:', err);\n      setFeedData({\n        recommendation: null,\n        fallback: true,\n        error: err instanceof Error ? err.message : 'Unknown error occurred',\n        disclaimer: 'Menggunakan konten RSS sebagai fallback.'\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRefresh = () => {\n    setRefreshKey(prev => prev + 1);\n  };\n\n  const getBpdScoreColor = (score: number) => {\n    if (score >= 0.8) return 'text-green-600 dark:text-green-400';\n    if (score >= 0.6) return 'text-yellow-600 dark:text-yellow-400';\n    return 'text-red-600 dark:text-red-400';\n  };\n\n  const getBpdScoreBar = (score: number) => {\n    const percentage = score * 100;\n    let colorClass = 'bg-red-500';\n    if (score >= 0.8) colorClass = 'bg-green-500';\n    else if (score >= 0.6) colorClass = 'bg-yellow-500';\n    \n    return (\n      <div className=\"flex items-center space-x-2\">\n        <div className=\"w-16 bg-gray-200 dark:bg-zinc-700 rounded-full h-2\">\n          <div \n            className={`h-2 rounded-full ${colorClass}`} \n            style={{ width: `${percentage}%` }}\n          ></div>\n        </div>\n        <span className=\"text-xs text-gray-600 dark:text-gray-400\">{Math.round(percentage)}%</span>\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className={`bg-white dark:bg-zinc-900 rounded-lg shadow-md p-6 ${className}`}>\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-zinc-900 dark:text-white flex items-center\">\n            <svg className=\"w-5 h-5 mr-2 text-teal-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n            </svg>\n            üéØ Personalized for You\n          </h3>\n          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-teal-600\"></div>\n        </div>\n        \n        <div className=\"space-y-4\">\n          {[1, 2, 3, 4].map((i) => (\n            <div key={i} className=\"animate-pulse bg-gray-100 dark:bg-zinc-800 rounded-lg p-4\">\n              <div className=\"h-4 bg-gray-300 dark:bg-zinc-700 rounded w-3/4 mb-2\"></div>\n              <div className=\"h-3 bg-gray-200 dark:bg-zinc-600 rounded w-1/2 mb-2\"></div>\n              <div className=\"h-3 bg-gray-200 dark:bg-zinc-600 rounded w-2/3\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`bg-white dark:bg-zinc-900 rounded-lg shadow-md p-6 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-3\">\n          <svg className=\"w-5 h-5 text-teal-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n          </svg>\n          <h3 className=\"text-lg font-semibold text-zinc-900 dark:text-white\">\n            üéØ Personalized for You\n          </h3>\n          {feedData.fallback && (\n            <span className=\"px-2 py-1 bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-200 text-xs rounded-full\">\n              {feedData.error ? 'Error Mode' : 'Fallback Mode'}\n            </span>\n          )}\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <button\n            onClick={handleRefresh}\n            disabled={loading}\n            className=\"p-2 bg-teal-100 text-teal-700 dark:bg-teal-900/30 dark:text-teal-300 rounded hover:bg-teal-200 dark:hover:bg-teal-900/50 transition-colors disabled:opacity-50\"\n            title=\"Refresh recommendations\"\n          >\n            <svg className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n\n      {/* Error State */}\n      {feedData.error && (\n        <div className=\"mb-6 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg\">\n          <div className=\"flex items-center mb-2\">\n            <svg className=\"w-5 h-5 text-red-600 dark:text-red-400 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.98-.833-2.75 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n            </svg>\n            <h4 className=\"font-medium text-red-800 dark:text-red-200\">AI Personalization Unavailable</h4>\n          </div>\n          <p className=\"text-sm text-red-700 dark:text-red-300 mb-2\">{feedData.error}</p>\n          <p className=\"text-xs text-red-600 dark:text-red-400\">Showing curated BRICS and Indonesian content instead.</p>\n        </div>\n      )}\n\n      {/* BPD Alignment Scores */}\n      {feedData.bpdAlignment && !feedData.fallback && (\n        <div className=\"mb-6 p-4 bg-gradient-to-r from-teal-50 to-blue-50 dark:from-teal-900/20 dark:to-blue-900/20 rounded-lg border border-teal-200 dark:border-teal-700\">\n          <h4 className=\"font-medium text-zinc-900 dark:text-white mb-3 flex items-center\">\n            <span className=\"mr-2\">üåç</span>\n            BPD Values Alignment\n          </h4>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 text-sm\">\n            <div>\n              <div className=\"flex items-center justify-between mb-1\">\n                <span className=\"text-zinc-700 dark:text-zinc-300\">Mutual Respect</span>\n                <span className={getBpdScoreColor(feedData.bpdAlignment.mutualRespect)}>\n                  {Math.round(feedData.bpdAlignment.mutualRespect * 100)}%\n                </span>\n              </div>\n              {getBpdScoreBar(feedData.bpdAlignment.mutualRespect)}\n            </div>\n            \n            <div>\n              <div className=\"flex items-center justify-between mb-1\">\n                <span className=\"text-zinc-700 dark:text-zinc-300\">Equality</span>\n                <span className={getBpdScoreColor(feedData.bpdAlignment.equality)}>\n                  {Math.round(feedData.bpdAlignment.equality * 100)}%\n                </span>\n              </div>\n              {getBpdScoreBar(feedData.bpdAlignment.equality)}\n            </div>\n            \n            <div>\n              <div className=\"flex items-center justify-between mb-1\">\n                <span className=\"text-zinc-700 dark:text-zinc-300\">Inclusiveness</span>\n                <span className={getBpdScoreColor(feedData.bpdAlignment.inclusiveness)}>\n                  {Math.round(feedData.bpdAlignment.inclusiveness * 100)}%\n                </span>\n              </div>\n              {getBpdScoreBar(feedData.bpdAlignment.inclusiveness)}\n            </div>\n            \n            <div>\n              <div className=\"flex items-center justify-between mb-1\">\n                <span className=\"text-zinc-700 dark:text-zinc-300\">Multipolarity</span>\n                <span className={getBpdScoreColor(feedData.bpdAlignment.multipolarity)}>\n                  {Math.round(feedData.bpdAlignment.multipolarity * 100)}%\n                </span>\n              </div>\n              {getBpdScoreBar(feedData.bpdAlignment.multipolarity)}\n            </div>\n            \n            <div>\n              <div className=\"flex items-center justify-between mb-1\">\n                <span className=\"text-zinc-700 dark:text-zinc-300\">Sustainability</span>\n                <span className={getBpdScoreColor(feedData.bpdAlignment.sustainability)}>\n                  {Math.round(feedData.bpdAlignment.sustainability * 100)}%\n                </span>\n              </div>\n              {getBpdScoreBar(feedData.bpdAlignment.sustainability)}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* AI Reasoning */}\n      {feedData.recommendation?.reasoning && (\n        <div className=\"mb-6 p-4 bg-gray-50 dark:bg-zinc-800 rounded-lg\">\n          <h4 className=\"font-medium text-zinc-900 dark:text-white mb-2 flex items-center\">\n            <span className=\"mr-2\">ü§ñ</span>\n            AI Curation Reasoning\n          </h4>\n          <p className=\"text-sm text-zinc-700 dark:text-zinc-300 leading-relaxed\">\n            {feedData.recommendation.reasoning}\n          </p>\n          \n          {!feedData.fallback && (\n            <div className=\"mt-3 flex items-center space-x-4 text-xs text-gray-600 dark:text-gray-400\">\n              <div className=\"flex items-center space-x-1\">\n                <span>Inclusivity Score:</span>\n                <span className={getBpdScoreColor(feedData.recommendation.inclusivityScore)}>\n                  {Math.round(feedData.recommendation.inclusivityScore * 100)}%\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <span>Multipolar Balance:</span>\n                <span className={getBpdScoreColor(feedData.recommendation.multipolarBalance)}>\n                  {Math.round(feedData.recommendation.multipolarBalance * 100)}%\n                </span>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Articles */}\n      {feedData.recommendation?.articles && feedData.recommendation.articles.length > 0 ? (\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h4 className=\"font-medium text-zinc-900 dark:text-white\">\n              Recommended Articles ({feedData.recommendation.articles.length})\n            </h4>\n            {feedData.totalArticles && (\n              <span className=\"text-xs text-gray-600 dark:text-gray-400\">\n                Selected from {feedData.totalArticles} available articles\n              </span>\n            )}\n          </div>\n          \n          <div className=\"grid gap-4 md:grid-cols-2\">\n            {feedData.recommendation.articles.map((article, index) => (\n              <div key={`${article.url}-${index}`} className=\"relative\">\n                <ArticleCard \n                  article={article} \n                  className=\"h-full\"\n                />\n                {!feedData.fallback && (\n                  <div className=\"absolute top-2 right-2 bg-teal-600 text-white text-xs px-2 py-1 rounded-full\">\n                    AI Pick #{index + 1}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      ) : (\n        <div className=\"text-center py-8\">\n          <div className=\"w-16 h-16 bg-gray-100 dark:bg-zinc-800 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <svg className=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.29.82-5.877 2.172\" />\n            </svg>\n          </div>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-2\">\n            No personalized recommendations available\n          </p>\n          <p className=\"text-sm text-gray-500 dark:text-gray-500\">\n            {feedData.error ? 'Please try again later or check your preferences.' : 'Configure your preferences to get personalized content.'}\n          </p>\n        </div>\n      )}\n\n      {/* Footer */}\n      <div className=\"mt-6 pt-4 border-t border-gray-200 dark:border-zinc-700\">\n        <div className=\"flex items-center justify-between text-xs text-gray-500 dark:text-gray-400\">\n          <div className=\"flex items-center space-x-4\">\n            <span>Updated: {new Date().toLocaleString('id-ID')}</span>\n            <div className=\"flex items-center space-x-1\">\n              <div className={`w-2 h-2 rounded-full ${feedData.fallback ? 'bg-yellow-500' : 'bg-green-500'}`}></div>\n              <span>{feedData.fallback ? 'Fallback Mode' : 'AI Powered'}</span>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <span>Powered by</span>\n            <span className=\"font-medium text-teal-600 dark:text-teal-400\">Grok AI</span>\n            <span>+</span>\n            <span className=\"font-medium text-orange-600 dark:text-orange-400\">BPD Values</span>\n          </div>\n        </div>\n        \n        {feedData.disclaimer && (\n          <div className=\"mt-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded text-xs text-blue-800 dark:text-blue-200\">\n            <p>{feedData.disclaimer}</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}"