"use client";

import { useEffect, useRef } from "react";

interface AdsterraAdsProps {
  type: "banner" | "social-bar" | "native" | "popunder";
  className?: string;
  zoneId?: string;
}

const AdsterraAds: React.FC<AdsterraAdsProps> = ({
  type,
  className = "",
  zoneId = process.env.NEXT_PUBLIC_ADSTERRA_NATIVE_ADS,
}) => {
  const adRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (process.env.NODE_ENV === "production" && zoneId && adRef.current) {
      // Create script element
      const script = document.createElement("script");
      script.type = "text/javascript";
      
      // Set up the ad configuration based on type
      let adConfig = {};
      
      switch (type) {
        case "native":
          adConfig = {
            key: zoneId,
            format: "iframe",
            height: 250,
            width: 300,
            params: {}
          };
          break;
        case "banner": 
          adConfig = {
            key: zoneId,
            format: "iframe", 
            height: 90,
            width: 728,
            params: {}
          };
          break;
        default:
          adConfig = {
            key: zoneId,
            format: "iframe",
            height: 250,
            width: 300,
            params: {}
          };
      }

      // Create the ad script content
      script.innerHTML = `
        atOptions = ${JSON.stringify(adConfig)};
        document.write('<scr' + 'ipt type="text/javascript" src="http' + (location.protocol === 'https:' ? 's' : '') + '://www.displaycontentnetwork.com/' + atOptions.key + '/invoke.js"></scr' + 'ipt>');
      `;

      // Append to the ad container
      if (adRef.current) { adRef.current.appendChild(script); }

      return () => {
        // Cleanup
        if (adRef.current && adRef.current.contains(script)) {
          adRef.current.removeChild(script);
        }
      };
    }
  }, [type, zoneId]);

  // Development placeholder
  if (process.env.NODE_ENV === "development") {
    return (
      <div
        className={`bg-gray-100 dark:bg-gray-800 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg flex flex-col items-center justify-center text-gray-500 dark:text-gray-400 text-sm p-4 theme-transition ${className}`}
        style={{
          minHeight: type === "banner" ? "90px" : "250px",
          width: type === "banner" ? "728px" : "300px"
        }}
      >
        <div className="text-center">
          <div className="font-medium mb-2">ðŸ“¢ Adsterra {type.charAt(0).toUpperCase() + type.slice(1)} Ad</div>
          <div className="text-xs opacity-70">Zone ID: {zoneId || "Not Set"}</div>
          <div className="text-xs opacity-50 mt-1">
            (Development Preview - Live ads show in production)
          </div>
        </div>
      </div>
    );
  }

  // Production ad container
  return (
    <div
      ref={adRef}
      className={`adsterra-ad ${className}`}
      style={{
        display: "block",
        width: type === "banner" ? "728px" : "300px", 
        minHeight: type === "banner" ? "90px" : "250px",
        margin: "0 auto",
        textAlign: "center"
      }}
    />
  );
};

export default AdsterraAds;
